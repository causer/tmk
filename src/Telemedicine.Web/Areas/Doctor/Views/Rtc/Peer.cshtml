
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Doctor/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <video autoplay="autoplay" id="videoPeer"></video>
        </div>
        <div class="col-md-6">
            <video autoplay="autoplay" id="videoLocal" muted></video>
        </div>
    </div>
    <div class="row">
        <button id="startBtn" class="btn btn-info" disabled="disabled">Start</button>
        <button id="callBtn" class="btn btn-success">Call</button>
        <button id="hangBtn" class="btn btn-error" disabled="disabled">Hang</button>
    </div>
</div>

<div class="modal fade" id="incomingCallModal">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Входящий звонок</h4>
            </div>
            <div class="modal-body">
                <audio id="callSound" preload="auto" src="~/img/call.mp3" loop></audio>
                <div class="thumbnail">
                    <img src="~/img/no_avatar.png" alt="">
                </div>
                <h4><span id="caller-dn"></span></h4>
            </div>
            <div class="modal-footer">
                    <button type="button" class="btn btn-danger btn-call-dialog" data-dismiss="modal"><i class="fa fa-reply"></i></button>
                    <button type="button" class="btn btn-success btn-call-dialog" onclick="closeIncomingCallDialog(true);"><i class="fa fa-phone"></i></button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script src="~/lib/adapter/js/adapter.js"></script>
    <script>
        'use strict';

        var imakecall;
        var peerConnection;
        var signalingHub;
        var _localVideoEl = document.getElementById('videoLocal');
        var _remoteVideoEl = document.getElementById('videoPeer');
        var constraints = { audio: true, video: true };

        var clientId;

        $(function() {
            signalingHub = $.connection.signalingHub;
            signalingHub.client.peerCall = onPeerCall;
            signalingHub.client.onCandidate = onRemoteCandidate;
            signalingHub.client.onPeerDescription = onRemoteDescription;
            signalingHub.client.onCallAccepted = function() {
                trace('call accepted!');
                createConnection();
                addMedia(peerConnection);
            };

            signalingHub.client.connected = function(connected) {
                if (connected !== $.connection.hub.id) {
                    clientId = connected;
                    _startBtn.disabled = false;
                }
            };

            $.connection.hub.start().done(function() {
                setupIncomingCallModal();
            });
        });

        function setupIncomingCallModal() {
            $('#incomingCallModal').on('shown.bs.modal', function(e) {
                document.getElementById('callSound').play();
                var modal = $(this);
                $('#caller-dn').text(modal.data('dn'));
            });

            $('#incomingCallModal').on('hidden.bs.modal', function(e) {
                document.getElementById('callSound').pause();
            });
        }

        function onPeerCall(callerInfo) {
            trace('peer call from callerInfo.DisplayName');
            var dialog = $('#incomingCallModal');
            dialog.data('dn', callerInfo.DisplayName);
            dialog.modal();
        }

        function closeIncomingCallDialog(accept) {
            $('#incomingCallModal').modal('hide');
            if (accept) {
                signalingHub.server.acceptCall();
                createConnection();
                addMedia(peerConnection);
            }
        }



        function createConnection() {
            var configuration = {
                iceServers: [
                    { urls: "stun:stun.services.mozilla.com" },
                    { urls: "stun:stun.l.google.com:19302" }
                ]
            };

            peerConnection = new RTCPeerConnection(configuration);
            peerConnection.onicecandidate = onIceCandidate;
            peerConnection.onaddstream = gotRemoteStream;
            peerConnection.onnegotiationneeded = function () {
                // peerConnection.createOffer(localDescCreated, logError);
            }

            peerConnection.oniceconnectionstatechange = function(event) {
                trace('state changed' + event.target.iceConnectionState);
                if (event.target.iceConnectionState === 'complete') {
                    //addMedia(event.target);
                }
            };

            peerConnection.onsignalingstatechange = function(event) {
                trace('signaling state change' + event);
            }
        }

        function logError(error) {
            alert(error);
        }

        function localDescCreated(desc) {
            peerConnection.setLocalDescription(desc, function() {
                signalingHub.server.sendDescription(JSON.stringify(peerConnection.localDescription));
            }, logError);
        }


        function onRemoteDescription(desc) {
            var parsed = $.parseJSON(desc);
            
            if (parsed.sdp) {
                trace('remote description accepted');
                var remoteDescription = new RTCSessionDescription(parsed);
                peerConnection.setRemoteDescription(remoteDescription, function () {
                    if (peerConnection.remoteDescription.type === 'offer') {
                        peerConnection.createAnswer(localDescCreated, logError);
                    }
                }, logError);
            }
        }

        function onIceCandidate(event) {
            if (event.candidate) {
                signalingHub.server.sendCandidate(clientId, event.candidate);
                trace('Local ICE candidate: \n' + event.candidate.candidate);
            }
        }

        function onRemoteCandidate(event) {
            var iceCandidate = new RTCIceCandidate(event);
            peerConnection.addIceCandidate(iceCandidate);
            trace('remote ice candidate');
        }

        function gotRemoteStream(event) {
            _remoteVideoEl.src = URL.createObjectURL(event.stream);
            trace('Received remote stream');
        }

        function addMedia(peerConnection) {
            getUserMedia(constraints,
                function (stream) {
                    peerConnection.addStream(stream);
                    _localVideoEl.src = URL.createObjectURL(stream);
                }, function(error) {
                    alert("WebRTC initialization failed!" + error);
                });
        }

        var _startBtn = document.getElementById('startBtn');
        var _callBtn = document.getElementById('callBtn');
        var _hangBtn = document.getElementById('hangBtn');


        _startBtn.onclick = function() {
            imakecall = true;
            signalingHub.server.startPeerCall(clientId);
        };

        _hangBtn.onclick = hangup;

        function gotLocalDescription(description) {
            _localPeerConnection.setLocalDescription(description);
            trace('Offer from localPeerConnection: \n' + description.sdp);
            _remotePeerConnection.setRemoteDescription(description);
            _remotePeerConnection.createAnswer(gotRemoteDescription);
        }

        function gotRemoteDescription(description) {
            _remotePeerConnection.setLocalDescription(description);
            trace('Answer from remotePeerConnection: \n' + description.sdp);
            _localPeerConnection.setRemoteDescription(description);
        }


        function hangup() {
            trace('Ending call');
            _localPeerConnection.close();
            _remotePeerConnection.close();
            _localPeerConnection = null;
            _remotePeerConnection = null;
            _hangBtn.disabled = true;
            _callBtn.disabled = false;
        }
    </script>
}
